init = c(249,254, 243, 268, 253, 269, 287, 241, 273, 306, 303, 280, 260, 256, 278, 344, 304, 283, 310)
#a
#finner estimert forventing, til de uavhengige og stokastiske veridene
n = length((init))
mu = 1/n * sum(init) #mean(init)
#finner forventingsrett estimert standardavvik.
S = sdinit = sqrt(1/(n-1)*sum((init - mu)^2))#sd(init)
#finner 90% CI for mu
tCI = mu +c(1,-1)*qt(0.05,df=n-1)*(S/sqrt(n))
#b
#sigma estimeres til S
sigma = S
#finner 90% CI for sigma
chiCI = S*sqrt(18/qchisq(c(0.95,1-0.95), n-1))
#c
#plotter dataen for ? se om det er tilnemet en normallinjes
qqnorm(init)
qqline(init)
init = c(249,254, 243, 268, 253, 269, 287, 241, 273, 306, 303, 280, 260, 256, 278, 344, 304, 283, 310)
#a
#finner estimert forventing, til de uavhengige og stokastiske veridene
n = length((init))
mu = 1/n * sum(init); mu #mean(init)
#finner forventingsrett estimert standardavvik.
S = sdinit = sqrt(1/(n-1)*sum((init - mu)^2));S#sd(init)
#finner 90% CI for mu
tCI = mu +c(1,-1)*qt(0.05,df=n-1)*(S/sqrt(n)); tCI
#b
#sigma estimeres til S
sigma = S
#finner 90% CI for sigma
chiCI = S*sqrt(18/qchisq(c(0.95,1-0.95), n-1));chiCI
#c
#plotter dataen for ? se om det er tilnemet en normallinjes
qqnorm(init)
qqline(init)
set.seed(11)
mu = 1
sigma = 1
n = 8
ant_setts = 1000
Clvl = 0.975 #konfidens nivaa
simulation <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rnorm(n,mu,sigma)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
#d
n = c(30,200)
for (i in n){
print(simulation(mu, sigma, i, ant_sets, Clvl))
}
#e
n = 8
my = 1
sigma= 1
exponent <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rexp(n,rate=1)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
exponent(mu, sigma, n, ant_sets, Clvl)
#f
n  = c(30,200)
for (i in n){
print(exponent(mu, sigma, i, ant_sets, Clvl))
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
set.seed(11)
mu = 1
sigma = 1
n = 8
ant_setts = 1000
Clvl = 0.975 #konfidens nivaa
simulation <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rnorm(n,mu,sigma)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
print(simulation(mu, sigma, n, ant_sets, Clvl))[,2]
print(simulation(mu, sigma, n, ant_sets, Clvl))[,1]
print(simulation(mu, sigma, n, ant_sets, Clvl))[1]
print(simulation(mu, sigma, n, ant_sets, Clvl))[2]
print(simulation(mu, sigma, n, ant_sets, Clvl))[3]
print(simulation(mu, sigma, n, ant_sets, Clvl)[1])
print(simulation(mu, sigma, n, ant_sets, Clvl)[2])
print(simulation(mu, sigma, n, ant_sets, Clvl)[3])
print(simulation(mu, sigma, n, ant_sets, Clvl)[4])
print(simulation(mu, sigma, n, ant_sets, Clvl)[0])
set.seed(11)
mu = 1
sigma = 1
n = 8
ant_setts = 1000
Clvl = 0.975 #konfidens nivaa
simulation <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rnorm(n,mu,sigma)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
#d
n = c(30,200)
for (i in n){
print(simulation(mu, sigma, i, ant_sets, Clvl))
}
#e
n = 8
my = 1
sigma= 1
exponent <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rexp(n,rate=1)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
exponent(mu, sigma, n, ant_sets, Clvl)
#f
n  = c(30,200)
for (i in n){
print(exponent(mu, sigma, i, ant_sets, Clvl))
}
set.seed(11)
mu = 1
sigma = 1
n = 8
ant_setts = 1000
Clvl = 0.975 #konfidens nivaa
simulation <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rnorm(n,mu,sigma)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
#d
n = c(30,200)
for (i in n){
print(simulation(mu, sigma, i, ant_sets, Clvl))
}
#e
n = 8
my = 1
sigma= 1
exponent <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rexp(n,rate=1)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
exponent(mu, sigma, n, ant_sets, Clvl)
#f
n  = c(30,200)
for (i in n){
print(exponent(mu, sigma, i, ant_sets, Clvl))
}
set.seed(11)
mu = 1
sigma = 1
n = 8
ant_setts = 1000
Clvl = 0.975 #konfidens nivaa
simulation <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rnorm(n,mu,sigma)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
print(simulation(mu, sigma, n, ant_sets, Clvl))
#d
n = c(30,200)
for (i in n){
print(simulation(mu, sigma, i, ant_sets, Clvl))
}
#e
n = 8
my = 1
sigma= 1
exponent <- function(mu, sigma, n, ant_sets, Clvl){
simres=numeric(0)
for (i in 1:ant_setts) {
x=rexp(n,rate=1)
muhat=mean(x)
sdx=sd(x)
muCIt = muhat +c(-1,1)*qt(Clvl,df=n-1)*sdx/sqrt(n) #CI for  my
sdxCIKJI = sdx*sqrt((n-1)/qchisq(c(Clvl,1-Clvl), n-1))#CI for sigma
nyres = c(muhat,sdx, muCIt,sdxCIKJI)
simres=rbind(simres,nyres)
}
muCItinInterval= sum((simres[,3]<1)*(1<simres[,4]));
sdxCIKJIinIntervall = sum((simres[,5]<1)*(1<simres[,6]));
c(muCItinInterval, sdxCIKJIinIntervall)
}
exponent(mu, sigma, n, ant_sets, Clvl)
#f
n  = c(30,200)
for (i in n){
print(exponent(mu, sigma, i, ant_sets, Clvl))
}
View(exponent)
View(exponent)
mu
init = c(249,254, 243, 268, 253, 269, 287, 241, 273, 306, 303, 280, 260, 256, 278, 344, 304, 283, 310)
#a
#finner estimert forventing, til de uavhengige og stokastiske veridene
n = length((init))
mu = 1/n * sum(init); #mean(init)
#finner forventingsrett estimert standardavvik.
S = sdinit = sqrt(1/(n-1)*sum((init - mu)^2))#sd(init)
#finner 90% CI for mu
tCI = mu +c(1,-1)*qt(0.05,df=n-1)*(S/sqrt(n))
#b
#sigma estimeres til S
sigma = S
#finner 90% CI for sigma
chiCI = S*sqrt(18/qchisq(c(0.95,1-0.95), n-1))
#c
#plotter dataen for ? se om det er tilnemet en normallinjes
qqnorm(init)
qqline(init)
mu
s
S
n
(mu-265)/(S/sqrt(n))
tCI
